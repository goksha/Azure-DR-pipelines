name: "Deploy velero"

on:
  workflow_dispatch:

jobs:
  job_id:
    # Add "id-token" with the intended permissions.
    permissions:
      contents: 'read'
      id-token: 'write'
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    - name: Azure CLI script
      uses: azure/CLI@v1
      with:
        azcliversion: 2.30.0
        inlineScript: |
          az aks get-credentials --resource-group my-aks-cluster-rg --name my-aks-cluster-primary
          wget https://github.com/vmware-tanzu/velero/releases/download/v1.10.2/velero-v1.10.2-linux-amd64.tar.gz
          tar -zxvf velero-v1.10.2-linux-amd64.tar.gz
          cd velero-v1.10.2-linux-amd64
          echo '${{secrets.GCP_CREDENTIALS}}' > credentials-velero
          cat credentials-velero
          ./velero install --plugins velero/velero-plugin-for-gcp:v1.6.0,velero/velero-plugin-for-csi:v0.4.2,velero/velero-plugin-for-microsoft-azure:v1.6.0 --use-node-agent --features=enableCSI --provider gcp --uploader-type restic --bucket 'shagok-velero-backup' --secret-file ./credentials-velero --use-volume-snapshots=false
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          cat << EOF > storage-class-gcp.yml
          apiVersion: storage.k8s.io/v1
          kind: StorageClass
          metadata:
            name: standard-rwo
          provisioner: kubernetes.io/azure-disk
          parameters:
            storageaccounttype: Standard_LRS
            kind: Managed
            cachingmode: ReadOnly
          EOF
          chmod +x kubectl
          set +e
          ./kubectl create -f storage-class-gcp.yml
          set -e
          ./kubectl wait --for=condition=available deployment/velero -n velero --timeout=300s
          echo "Velero installation is completed. Proceeding with restoration."
          ./velero restore create --include-namespaces wordpress --from-backup fs-backup
            # Output file to save timing information
            OUTPUT_FILE="timing_output.txt"
            # Function to print timestamp and formatted duration
            function print_timing {
              local minutes=$(( $1 / 60 ))
              local seconds=$(( $1 % 60 ))
              printf "%02d minutes %02d seconds\n" "$minutes" "$seconds" >> "$GITHUB_WORKSPACE/$OUTPUT_FILE"
            }
                        # Start timing
            start_time=$(date +%s)

            # Wait for all resources in the namespace to be ready
            time ./kubectl wait --for=condition=available all -n wordpress --timeout=300s 2>&1 | tee -a "$GITHUB_WORKSPACE/$OUTPUT_FILE"

            # Calculate duration
            end_time=$(date +%s)
            duration=$((end_time - start_time))

            # Print total duration
            print_timing "$duration"
                
    - name: Upload timing_output.txt as an artifact
      uses: actions/upload-artifact@v2
      with:
          name: timing_output
          path: timing_output.txt
          
